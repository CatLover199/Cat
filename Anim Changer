--This is a script that roblox made (Script location: content\avatar\unification\humanoidClassicAnimate.lua) but I edited for it to work with exploits and etc.
--Edited by Invisible_#3657 :3

--[[
The higher the weight is, the more that animation will play. You can also put as many animations in animNames. Just make sure they're the correct asset id. You can get the asset ids here: https://create.roblox.com/docs/animation/using. This is also edited by Lover idle. The only changes i made were the Idle, Most stuff were edited by Invisible_#3657. Credit to Invisible_#3657 Also. If you want the old R15 run, it's there, like the one Piggy, Work at a Pizza Place, etc.
]]--

local plr = game:GetService("Players").LocalPlayer

function RunCustomAnimation(Char)
        if Char:WaitForChild("Animate") ~= nil then
                Char.Animate.Disabled = true
        end

        Char:WaitForChild("Humanoid")

        for i,v in next, Char.Humanoid:GetPlayingAnimationTracks() do
                v:Stop()
        end

        --fake script
        local script = Char.Animate

        local Character = Char
        local Humanoid = Character:WaitForChild("Humanoid")
        local pose = "Standing"

        local UserGameSettings = UserSettings():GetService("UserGameSettings")

        local userNoUpdateOnLoopSuccess, userNoUpdateOnLoopValue = pcall(function() return UserSettings():IsUserFeatureEnabled("UserNoUpdateOnLoop") end)
        local userNoUpdateOnLoop = userNoUpdateOnLoopSuccess and userNoUpdateOnLoopValue

        local AnimationSpeedDampeningObject = script:FindFirstChild("ScaleDampeningPercent")
        local HumanoidHipHeight = 2

        local humanoidSpeed = 0 -- speed most recently sent to us from onRunning()
        local cachedRunningSpeed = 0 -- The most recent speed used to compute blends.  Tiny variations from cachedRunningSpeed will not cause animation updates.
        local cachedLocalDirection = {x=0.0, y=0.0} -- unit 2D object space direction of motion
        local smallButNotZero = 0.0001 -- We want weights to be small but not so small the animation stops
        local runBlendtime = 0.2
        local lastLookVector = Vector3.new(0.0, 0.0, 0.0) -- used to track whether rootPart orientation is changing.
        local lastBlendTime = 0 -- The last time we blended velocities
        local WALK_SPEED = 6.4
        local RUN_SPEED = 12.8

        local EMOTE_TRANSITION_TIME = 0.1

        local currentAnim = ""
        local currentAnimInstance = nil
        local currentAnimTrack = nil
        local currentAnimKeyframeHandler = nil
        local currentAnimSpeed = 1.0

        local PreloadedAnims = {}

        local animTable = {}
local animNames = { 
	idle = 	{	
				{ id = "http://www.roblox.com/asset/?id=782841498", weight = 9 },
				{ id = "http://www.roblox.com/asset/?id=782845736", weight = 1 }
			},
	walk = 	{ 	
				{ id = "http://www.roblox.com/asset/?id=507777826", weight = 10 } 
			}, 
	run = 	{
				{ id = "http://www.roblox.com/asset/?id=507767714", weight = 10 } 
			}, 
	swim = 	{
				{ id = "http://www.roblox.com/asset/?id=507784897", weight = 10 } 
			}, 
	swimidle = 	{
				{ id = "http://www.roblox.com/asset/?id=507785072", weight = 10 } 
			}, 
	jump = 	{
				{ id = "http://www.roblox.com/asset/?id=507765000", weight = 10 } 
			}, 
	fall = 	{
				{ id = "http://www.roblox.com/asset/?id=507767968", weight = 10 } 
			}, 
	climb = {
				{ id = "http://www.roblox.com/asset/?id=507765644", weight = 10 } 
			}, 
	sit = 	{
				{ id = "http://www.roblox.com/asset/?id=507768133", weight = 10 } 
			},	
	toolnone = {
				{ id = "http://www.roblox.com/asset/?id=507768375", weight = 10 } 
			},
	toolslash = {
				{ id = "http://www.roblox.com/asset/?id=522635514", weight = 10 } 
			},
	toollunge = {
				{ id = "http://www.roblox.com/asset/?id=522638767", weight = 10 } 
			},
	wave = {
				{ id = "http://www.roblox.com/asset/?id=507770239", weight = 10 } 
			},
	point = {
				{ id = "http://www.roblox.com/asset/?id=507770453", weight = 10 } 
			},
	dance = {
				{ id = "http://www.roblox.com/asset/?id=507771019", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=507771955", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=507772104", weight = 10 } 
			},
	dance2 = {
				{ id = "http://www.roblox.com/asset/?id=507776043", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=507776720", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=507776879", weight = 10 } 
			},
	dance3 = {
				{ id = "http://www.roblox.com/asset/?id=507777268", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=507777451", weight = 10 }, 
				{ id = "http://www.roblox.com/asset/?id=507777623", weight = 10 } 
			},
	laugh = {
				{ id = "http://www.roblox.com/asset/?id=507770818", weight = 10 } 
			},
	cheer = {
				{ id = "http://www.roblox.com/asset/?id=507770677", weight = 10 } 
			},
}


        local strafingLocomotionMap = {}
        local fallbackLocomotionMap = {}
        local locomotionMap = strafingLocomotionMap
        -- Existance in this list signifies that it is an emote, the value indicates if it is a looping emote
        local emoteNames = { wave = false, point = false, dance = true, dance2 = true, dance3 = true, laugh = false, cheer = false}

        math.randomseed(tick())

        function findExistingAnimationInSet(set, anim)
                if set == nil or anim == nil then
                        return 0
                end

                for idx = 1, set.count, 1 do
                        if set[idx].anim.AnimationId == anim.AnimationId then
                                return idx
                        end
                end

                return 0
        end

        function configureAnimationSet(name, fileList)
                if (animTable[name] ~= nil) then
                        for _, connection in pairs(animTable[name].connections) do
                                connection:disconnect()
                        end
                end
                animTable[name] = {}
                animTable[name].count = 0
                animTable[name].totalWeight = 0
                animTable[name].connections = {}

                -- uncomment this section to allow players to load with their
                -- own (non-classic) animations
        --[[
        local config = script:FindFirstChild(name)
        if (config ~= nil) then
            table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
            table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))

            local idx = 0

            for _, childPart in pairs(config:GetChildren()) do
                if (childPart:IsA("Animation")) then
                    local newWeight = 1
                    local weightObject = childPart:FindFirstChild("Weight")
                    if (weightObject ~= nil) then
                        newWeight = weightObject.Value
                    end
                    animTable[name].count = animTable[name].count + 1
                    idx = animTable[name].count
                    animTable[name][idx] = {}
                    animTable[name][idx].anim = childPart
                    animTable[name][idx].weight = newWeight
                    animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
                    table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
                    table.insert(animTable[name].connections, childPart.ChildAdded:connect(function(property) configureAnimationSet(name, fileList) end))
                    table.insert(animTable[name].connections, childPart.ChildRemoved:connect(function(property) configureAnimationSet(name, fileList) end))
                    local lv = childPart:GetAttribute("LinearVelocity")
                    if lv then
                        strafingLocomotionMap[name] = {lv=lv, speed = lv.Magnitude}
                    end
                    if name == "run" or name == "walk" then

                        if lv then
                            fallbackLocomotionMap[name] = strafingLocomotionMap[name]
                        else
                            local speed = name == "run" and RUN_SPEED or WALK_SPEED
                            fallbackLocomotionMap[name] = {lv=Vector2.new(0.0, speed), speed = speed}
                            locomotionMap = fallbackLocomotionMap
                            -- If you don't have a linear velocity with your run or walk, you can't blend/strafe
                            --warn("Strafe blending disabled. No linear velocity information for "..'"'.."walk"..'"'.." and "..'"'.."run"..'"'..".")
                        end

                    end
                end
            end
        end
        ]]

                -- if you uncomment the above section, comment out this "if"-block
                if name == "run" or name == "walk" then
                        local speed = name == "run" and RUN_SPEED or WALK_SPEED
                        fallbackLocomotionMap[name] = {lv=Vector2.new(0.0, speed), speed = speed}
                        locomotionMap = fallbackLocomotionMap
                        -- If you don't have a linear velocity with your run or walk, you can't blend/strafe
                        --warn("Strafe blending disabled. No linear velocity information for "..'"'.."walk"..'"'.." and "..'"'.."run"..'"'..".")
                end


                -- fallback to defaults
                if (animTable[name].count <= 0) then
                        for idx, anim in pairs(fileList) do
                                animTable[name][idx] = {}
                                animTable[name][idx].anim = Instance.new("Animation")
                                animTable[name][idx].anim.Name = name
                                animTable[name][idx].anim.AnimationId = anim.id
                                animTable[name][idx].weight = anim.weight
                                animTable[name].count = animTable[name].count + 1
                                animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
                        end
                end

                -- preload anims
                for i, animType in pairs(animTable) do
                        for idx = 1, animType.count, 1 do
                                if PreloadedAnims[animType[idx].anim.AnimationId] == nil then
                                        Humanoid:LoadAnimation(animType[idx].anim)
                                        PreloadedAnims[animType[idx].anim.AnimationId] = true
                                end
                        end
                end
        end

        -- Setup animation objects
        function scriptChildModified(child)
                local fileList = animNames[child.Name]
                if (fileList ~= nil) then
                        configureAnimationSet(child.Name, fileList)
                else
                        if child:isA("StringValue") then
                                animNames[child.Name] = {}
                                configureAnimationSet(child.Name, animNames[child.Name])
                        end
                end        
        end

        script.ChildAdded:connect(scriptChildModified)
        script.ChildRemoved:connect(scriptChildModified)

        -- Clear any existing animation tracks
        -- Fixes issue with characters that are moved in and out of the Workspace accumulating tracks
        local animator = if Humanoid then Humanoid:FindFirstChildOfClass("Animator") else nil
        if animator then
                local animTracks = animator:GetPlayingAnimationTracks()
                for i,track in ipairs(animTracks) do
                        track:Stop(0)
                        track:Destroy()
                end
        end

        for name, fileList in pairs(animNames) do
                configureAnimationSet(name, fileList)
        end
        for _,child in script:GetChildren() do
                if child:isA("StringValue") and not animNames[child.name] then
                        animNames[child.Name] = {}
                        configureAnimationSet(child.Name, animNames[child.Name])
                end
        end

        -- ANIMATION

        -- declarations
        local toolAnim = "None"
        local toolAnimTime = 0

        local jumpAnimTime = 0
        local jumpAnimDuration = 0.31

        local toolTransitionTime = 0.1
        local fallTransitionTime = 0.2

        local currentlyPlayingEmote = false

        -- functions

        function stopAllAnimations()
                local oldAnim = currentAnim

                -- return to idle if finishing an emote
                if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
                        oldAnim = "idle"
                end

                if currentlyPlayingEmote then
                        oldAnim = "idle"
                        currentlyPlayingEmote = false
                end

                currentAnim = ""
                currentAnimInstance = nil
                if (currentAnimKeyframeHandler ~= nil) then
                        currentAnimKeyframeHandler:disconnect()
                end

                if (currentAnimTrack ~= nil) then
                        currentAnimTrack:Stop()
                        currentAnimTrack:Destroy()
                        currentAnimTrack = nil
                end

                for _,v in pairs(locomotionMap) do
                        if v.track then
                                v.track:Stop()
                                v.track:Destroy()
                                v.track = nil
                        end
                end

                return oldAnim
        end

        function getHeightScale()
                if Humanoid then
                        if not Humanoid.AutomaticScalingEnabled then
                                return 1
                        end

                        local scale = Humanoid.HipHeight / HumanoidHipHeight
                        if AnimationSpeedDampeningObject == nil then
                                AnimationSpeedDampeningObject = script:FindFirstChild("ScaleDampeningPercent")
                        end
                        if AnimationSpeedDampeningObject ~= nil then
                                scale = 1 + (Humanoid.HipHeight - HumanoidHipHeight) * AnimationSpeedDampeningObject.Value / HumanoidHipHeight
                        end
                        return scale
                end
                return 1
        end


        local function signedAngle(a, b)
                return -math.atan2(a.x * b.y - a.y * b.x, a.x * b.x + a.y * b.y)
        end

        local angleWeight = 2.0
        local function get2DWeight(px, p1, p2, sx, s1, s2)
                local avgLength = 0.5 * (s1 + s2)

                local p_1 = {x = (sx - s1)/avgLength, y = (angleWeight * signedAngle(p1, px))}
                local p12 = {x = (s2 - s1)/avgLength, y = (angleWeight * signedAngle(p1, p2))}        
                local denom = smallButNotZero + (p12.x*p12.x + p12.y*p12.y)
                local numer = p_1.x * p12.x + p_1.y * p12.y
                local r = math.clamp(1.0 - numer/denom, 0.0, 1.0)
                return r
        end

        local function blend2D(targetVelo, targetSpeed)
                local h = {}
                local sum = 0.0
                for n,v1 in pairs(locomotionMap) do
                        if targetVelo.x * v1.lv.x < 0.0 or targetVelo.y * v1.lv.y < 0 then
                                -- Require same quadrant as target
                                h[n] = 0.0
                                continue
                        end
                        h[n] = math.huge
                        for j,v2 in pairs(locomotionMap) do
                                if targetVelo.x * v2.lv.x < 0.0 or targetVelo.y * v2.lv.y < 0 then
                                        -- Require same quadrant as target
                                        continue
                                end
                                h[n] = math.min(h[n], get2DWeight(targetVelo, v1.lv, v2.lv, targetSpeed, v1.speed, v2.speed))
                        end
                        sum += h[n]
                end

                --truncates below 10% contribution
                local sum2 = 0.0
                local weightedVeloX = 0
                local weightedVeloY = 0
                for n,v in pairs(locomotionMap) do

                        if (h[n] / sum > 0.1) then
                                sum2 += h[n]
                                weightedVeloX += h[n] * v.lv.x
                                weightedVeloY += h[n] * v.lv.y
                        else
                                h[n] = 0.0
                        end
                end
                local animSpeed
                local weightedSpeedSquared = weightedVeloX * weightedVeloX + weightedVeloY * weightedVeloY
                if weightedSpeedSquared > smallButNotZero then
                        animSpeed = math.sqrt(targetSpeed * targetSpeed / weightedSpeedSquared)
                else
                        animSpeed = 0
                end

                animSpeed = animSpeed / getHeightScale()
                local groupTimePosition = 0
                for n,v in pairs(locomotionMap) do
                        if v.track.IsPlaying then
                                groupTimePosition = v.track.TimePosition
                                break
                        end
                end
                for n,v in pairs(locomotionMap) do
                        -- if not loco
                        if h[n] > 0.0 then
                                if not v.track.IsPlaying then 
                                        v.track:Play(runBlendtime)
                                        v.track.TimePosition = groupTimePosition
                                end

                                local weight = math.max(smallButNotZero, h[n] / sum2)
                                v.track:AdjustWeight(weight, runBlendtime)
                                v.track:AdjustSpeed(animSpeed)
                        else
                                v.track:Stop(runBlendtime)
                        end
                end

        end

        local function getWalkDirection()
                local walkToPoint = Humanoid.WalkToPoint
                local walkToPart = Humanoid.WalkToPart
                if Humanoid.MoveDirection ~= Vector3.zero then
                        return Humanoid.MoveDirection
                elseif walkToPart or walkToPoint ~= Vector3.zero then
                        local destination
                        if walkToPart then
                                destination = walkToPart.CFrame:PointToWorldSpace(walkToPoint)
                        else
                                destination = walkToPoint
                        end
                        local moveVector = Vector3.zero
                        if Humanoid.RootPart then
                                moveVector = destination - Humanoid.RootPart.CFrame.Position
                                moveVector = Vector3.new(moveVector.x, 0.0, moveVector.z)
                                local mag = moveVector.Magnitude
                                if mag > 0.01 then
                                        moveVector /= mag
                                end
                        end
                        return moveVector
                else
                        return Humanoid.MoveDirection
                end
        end

        local function updateVelocity(currentTime)

            